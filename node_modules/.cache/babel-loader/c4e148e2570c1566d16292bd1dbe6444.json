{"ast":null,"code":"var _jsxFileName = \"/Users/zelin/starlink/src/components/WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { WORLD_MAP_URL } from \"../constant\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      map: null\n    };\n    this.refMap = React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  generateMap(land) {\n    const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n    const graticule = geoGraticule();\n    const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n    let context = canvas.node().getContext(\"2d\");\n    let path = geoPath().projection(projection).context(context);\n    land.forEach(ele => {\n      // draw the countries\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke(); // draw the graticule\n\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke(); // draw the graticule outline\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"map\",\n      ref: this.refMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/zelin/starlink/src/components/WorldMap.js"],"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","WORLD_MAP_URL","width","height","WorldMap","constructor","state","map","refMap","createRef","componentDidMount","get","then","res","data","land","objects","countries","features","generateMap","catch","e","console","log","projection","scale","translate","precision","graticule","canvas","current","attr","context","node","getContext","path","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\n\nimport { WORLD_MAP_URL } from \"../constant\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor(){\n        super();\n        this.state = {\n            map: null\n        }\n        this.refMap = React.createRef();\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fecth world map data ', e))\n    }\n\n    generateMap(land){\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        const graticule = geoGraticule();\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        let context = canvas.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach(ele => {\n            // draw the countries\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            // draw the graticule\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n\n            // draw the graticule outline\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"map-box\">\n                <canvas className=\"map\" ref={this.refMap} />\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}